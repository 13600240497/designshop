<?php
// This file was auto-generated from sdk-root/src/data/mediastore-data/2017-09-01/docs-2.json
return [ 'version' => '2.0', 'service' => '<p>An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.</p>', 'operations' => [ 'DeleteObject' => '<p>Deletes an object at the specified path.</p>', 'DescribeObject' => '<p>Gets the headers for an object at the specified path.</p>', 'GetObject' => '<p>Downloads the object at the specified path.</p>', 'ListItems' => '<p>Provides a list of metadata entries about folders and objects in the specified folder.</p>', 'PutObject' => '<p>Uploads an object to the specified path. Object sizes are limited to 10 MB.</p>', ], 'shapes' => [ 'ContainerNotFoundException' => [ 'base' => '<p>The specified container was not found for the specified account.</p>', 'refs' => [], ], 'ContentRangePattern' => [ 'base' => NULL, 'refs' => [ 'GetObjectResponse$ContentRange' => '<p>The range of bytes to retrieve.</p>', ], ], 'ContentType' => [ 'base' => NULL, 'refs' => [ 'DescribeObjectResponse$ContentType' => '<p>The content type of the object.</p>', 'GetObjectResponse$ContentType' => '<p>The content type of the object.</p>', 'Item$ContentType' => '<p>The content type of the item.</p>', 'PutObjectRequest$ContentType' => '<p>The content type of the object.</p>', ], ], 'DeleteObjectRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteObjectResponse' => [ 'base' => NULL, 'refs' => [], ], 'DescribeObjectRequest' => [ 'base' => NULL, 'refs' => [], ], 'DescribeObjectResponse' => [ 'base' => NULL, 'refs' => [], ], 'ETag' => [ 'base' => NULL, 'refs' => [ 'DescribeObjectResponse$ETag' => '<p>The ETag that represents a unique instance of the object.</p>', 'GetObjectResponse$ETag' => '<p>The ETag that represents a unique instance of the object.</p>', 'Item$ETag' => '<p>The ETag that represents a unique instance of the item.</p>', 'PutObjectResponse$ETag' => '<p>Unique identifier of the object in the container.</p>', ], ], 'ErrorMessage' => [ 'base' => NULL, 'refs' => [ 'ContainerNotFoundException$Message' => NULL, 'InternalServerError$Message' => NULL, 'ObjectNotFoundException$Message' => NULL, 'RequestedRangeNotSatisfiableException$Message' => NULL, ], ], 'GetObjectRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetObjectResponse' => [ 'base' => NULL, 'refs' => [], ], 'InternalServerError' => [ 'base' => '<p>The service is temporarily unavailable.</p>', 'refs' => [], ], 'Item' => [ 'base' => '<p>A metadata entry for a folder or object.</p>', 'refs' => [ 'ItemList$member' => NULL, ], ], 'ItemList' => [ 'base' => NULL, 'refs' => [ 'ListItemsResponse$Items' => '<p>Metadata entries for the folders and objects at the requested path.</p>', ], ], 'ItemName' => [ 'base' => NULL, 'refs' => [ 'Item$Name' => '<p>The name of the item.</p>', ], ], 'ItemType' => [ 'base' => NULL, 'refs' => [ 'Item$Type' => '<p>The item type (folder or object).</p>', ], ], 'ListItemsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListItemsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListLimit' => [ 'base' => NULL, 'refs' => [ 'ListItemsRequest$MaxResults' => '<p>The maximum results to return. The service might return fewer results.</p>', ], ], 'ListPathNaming' => [ 'base' => NULL, 'refs' => [ 'ListItemsRequest$Path' => '<p>The path in the container from which to retrieve items. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p>', ], ], 'NonNegativeLong' => [ 'base' => NULL, 'refs' => [ 'DescribeObjectResponse$ContentLength' => '<p>The length of the object in bytes.</p>', 'GetObjectResponse$ContentLength' => '<p>The length of the object in bytes.</p>', 'Item$ContentLength' => '<p>The length of the item in bytes.</p>', ], ], 'ObjectNotFoundException' => [ 'base' => '<p>Could not perform an operation on an object that does not exist.</p>', 'refs' => [], ], 'PaginationToken' => [ 'base' => NULL, 'refs' => [ 'ListItemsRequest$NextToken' => '<p>The <code>NextToken</code> received in the <code>ListItemsResponse</code> for the same container and path. Tokens expire after 15 minutes.</p>', 'ListItemsResponse$NextToken' => '<p>The <code>NextToken</code> used to request the next page of results using <code>ListItems</code>.</p>', ], ], 'PathNaming' => [ 'base' => NULL, 'refs' => [ 'DeleteObjectRequest$Path' => '<p>The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p>', 'DescribeObjectRequest$Path' => '<p>The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p>', 'GetObjectRequest$Path' => '<p>The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p> <p>For example, to upload the file <code>mlaw.avi</code> to the folder path <code>premium\\canada</code> in the container <code>movies</code>, enter the path <code>premium/canada/mlaw.avi</code>.</p> <p>Do not include the container name in this path.</p> <p>If the path includes any folders that don\'t exist yet, the service creates them. For example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the <code>premium</code> folder. You then have two subfolders, <code>usa</code> and <code>canada</code>, in the <code>premium</code> folder. </p> <p>There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore.</p> <p>For more information about folders and how they exist in a container, see the <a href="http://docs.aws.amazon.com/mediastore/latest/ug/">AWS Elemental MediaStore User Guide</a>.</p> <p>The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension. </p>', 'PutObjectRequest$Path' => '<p>The path (including the file name) where the object is stored in the container. Format: &lt;folder name&gt;/&lt;folder name&gt;/&lt;file name&gt;</p> <p>For example, to upload the file <code>mlaw.avi</code> to the folder path <code>premium\\canada</code> in the container <code>movies</code>, enter the path <code>premium/canada/mlaw.avi</code>.</p> <p>Do not include the container name in this path.</p> <p>If the path includes any folders that don\'t exist yet, the service creates them. For example, suppose you have an existing <code>premium/usa</code> subfolder. If you specify <code>premium/canada</code>, the service creates a <code>canada</code> subfolder in the <code>premium</code> folder. You then have two subfolders, <code>usa</code> and <code>canada</code>, in the <code>premium</code> folder. </p> <p>There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore.</p> <p>For more information about folders and how they exist in a container, see the <a href="http://docs.aws.amazon.com/mediastore/latest/ug/">AWS Elemental MediaStore User Guide</a>.</p> <p>The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension. </p>', ], ], 'PayloadBlob' => [ 'base' => NULL, 'refs' => [ 'GetObjectResponse$Body' => '<p>The bytes of the object. </p>', 'PutObjectRequest$Body' => '<p>The bytes to be stored. </p>', ], ], 'PutObjectRequest' => [ 'base' => NULL, 'refs' => [], ], 'PutObjectResponse' => [ 'base' => NULL, 'refs' => [], ], 'RangePattern' => [ 'base' => NULL, 'refs' => [ 'GetObjectRequest$Range' => '<p>The range bytes of an object to retrieve. For more information about the <code>Range</code> header, go to <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35</a>.</p>', ], ], 'RequestedRangeNotSatisfiableException' => [ 'base' => '<p>The requested content range is not valid.</p>', 'refs' => [], ], 'SHA256Hash' => [ 'base' => NULL, 'refs' => [ 'PutObjectResponse$ContentSHA256' => '<p>The SHA256 digest of the object that is persisted.</p>', ], ], 'StorageClass' => [ 'base' => NULL, 'refs' => [ 'PutObjectRequest$StorageClass' => '<p>Indicates the storage class of a <code>Put</code> request. Defaults to high-performance temporal storage class, and objects are persisted into durable storage shortly after being received.</p>', 'PutObjectResponse$StorageClass' => '<p>The storage class where the object was persisted. Should be “Temporal”.</p>', ], ], 'StringPrimitive' => [ 'base' => NULL, 'refs' => [ 'DescribeObjectResponse$CacheControl' => '<p>An optional <code>CacheControl</code> header that allows the caller to control the object\'s cache behavior. Headers can be passed in as specified in the HTTP at <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p> <p>Headers with a custom user-defined value are also accepted.</p>', 'GetObjectResponse$CacheControl' => '<p>An optional <code>CacheControl</code> header that allows the caller to control the object\'s cache behavior. Headers can be passed in as specified in the HTTP spec at <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p> <p>Headers with a custom user-defined value are also accepted.</p>', 'PutObjectRequest$CacheControl' => '<p>An optional <code>CacheControl</code> header that allows the caller to control the object\'s cache behavior. Headers can be passed in as specified in the HTTP at <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p> <p>Headers with a custom user-defined value are also accepted.</p>', ], ], 'TimeStamp' => [ 'base' => NULL, 'refs' => [ 'DescribeObjectResponse$LastModified' => '<p>The date and time that the object was last modified.</p>', 'GetObjectResponse$LastModified' => '<p>The date and time that the object was last modified.</p>', 'Item$LastModified' => '<p>The date and time that the item was last modified.</p>', ], ], 'statusCode' => [ 'base' => NULL, 'refs' => [ 'GetObjectResponse$StatusCode' => '<p>The HTML status code of the request. Status codes ranging from 200 to 299 indicate success. All other status codes indicate the type of error that occurred.</p>', ], ], ],];
